@using Shared.DTO
@using Client.Services

@inject MapService MapS
@code {
	
	[Parameter]
    public GeneratedMapDto Map { get; set; }
   
    [Parameter]
    public Action<SetTileDto> TileToSet { get; set; }
    
    private List<TileParam> TilesTypes = new List<TileParam>();
    private List<long> TilesIds = new List<long>();
	private Tilep[][] mapOfTile;
	private PriorityQueue<int[], double> q = new PriorityQueue<int[], double>();
	private List<int> allPossibilities = new List<int>();
 	private Random rnd = new Random();
    private int toReaload;
    private int currReaload;
    private bool CanWork = false;
    int[] curr;
    
	public async Task GenerateMap()
	{
		CanWork = true;
		mapOfTile = new Tilep[Map.N][];
		for (int i = 0; i < Map.N; i++)
		{
			mapOfTile[i] = new Tilep[Map.M];
		}
		TilesTypes.Clear();
		TilesIds.Clear();
		if(Map.seed == -1) Map.seed = (int)DateTime.Now.Ticks & 0x0000FFFF;
		rnd = new Random(Map.seed);
		toReaload = Map.N * Map.M / 100;
		currReaload = 0;
		foreach (var tw in Map.TileWeightDtos)
		{
			if (tw.Weight != 0)
			{
				TilesTypes.Add( new TileParam()
				{
					pola = new string[] { MapS.TilesUrl[tw.TileId].P0,MapS.TilesUrl[tw.TileId].P1,MapS.TilesUrl[tw.TileId].P2,MapS.TilesUrl[tw.TileId].P3 },
					weight = tw.Weight
				} );
				TilesIds.Add(tw.TileId);
			
			}
			if(!CanWork) break;
			
		} 
		allPossibilities = new List<int>();
		for (int i = 0; i < TilesTypes.Count() && CanWork; i++)
		{
			allPossibilities.Add(i);
		}
		
		for (int i = 0; i < Map.N && CanWork; i++)
		{
			for (int j = 0; j < Map.M && CanWork; j++)
			{
				mapOfTile[i][j] = new Tilep();
			}
		}
		q.Clear();
		foreach (var st in Map.SetTileDtos)
		{
			if(!CanWork) break;
			mapOfTile[st.N][st.M].Type = st.TileId;
			EvaluateBeginning(st.N,st.M);
			
		}

		if (q.Count == 0)
		{
			q.Enqueue([0,0],1);
			mapOfTile[0][0].Possibilities = allPossibilities;
			Entropy(0, 0);
		}
		
		
		while (q.Count > 0 && CanWork)
		{
			curr = q.Dequeue();
			
	
			 await Evaluate(curr[0],curr[1]);

		}
	
		
	}

	public async Task SetedTiles()
	{
		CanWork = true;
		foreach (var t in Map.SetTileDtos)
		{
			
			await Task.Delay(1);
			if(!CanWork) break;
			TileToSet.Invoke(t);
		}
		await Task.Delay(1);
	}
	

	private void Reduce(string by, int n, int m, int direction)
	{
		if (mapOfTile[n][m].Type != -1) return ;
		List<int> correct = new List<int>();
		int start = direction;
		if (mapOfTile[n][m].Possibilities == null) mapOfTile[n][m].Possibilities = allPossibilities;
		
		foreach (var t in mapOfTile[n][m].Possibilities)
		{
			if (RevCompere(TilesTypes[t].pola[start],by))
			{
				correct.Add(t);
			}

		}

		mapOfTile[n][m].Possibilities = correct;
	
		q.Enqueue([n,m], Entropy(n,m));
	}

	private bool RevCompere(string s1, string s2)
	{
		if (s1.Length != s2.Length) return false;
		int n = s1.Length -1;
		foreach (var c in s2)
		{
			if (c != s1[n--]) return false;
		}

		return true;

	}
	private double Entropy(int n, int m)
	{
		mapOfTile[n][m].WeightSum = 0;
		foreach (var t in mapOfTile[n][m].Possibilities)
		{
			mapOfTile[n][m].WeightSum += TilesTypes[t].weight;
		}
		double sum = mapOfTile[n][m].WeightSum;

		double entropy = 0;
		foreach (var t in mapOfTile[n][m].Possibilities)
		{
			entropy += TilesTypes[t].weight / sum * double.Log2(sum / TilesTypes[t].weight);
		}

		return entropy;

	}
	private async Task Evaluate(int n, int m )
	{
		
		if (mapOfTile[n][m].Type != -1) return;
	
		if (mapOfTile[n][m].Possibilities.Count() == 0) return;
		long   tileId;
		
		int tile = rnd.Next(mapOfTile[n][m].WeightSum);
		

		foreach (var t in  mapOfTile[n][m].Possibilities)
		{
			tile -= TilesTypes[t].weight;
			if (tile < 0)
			{
				tile = t;
				break;
			}
		}
		
		tileId = TilesIds[tile];
		mapOfTile[n][m].Type = tileId;
		TileToSet?.Invoke(new SetTileDto()
		{
			N = n,
			M=m,
			TileId = tileId
		});
		
		
		currReaload++;
		if (currReaload <= toReaload)
		{
			currReaload = 0;
			await Task.Delay(1);
		}
		
		
		if (n > 0)
		{
			Reduce( MapS.TilesUrl[tileId].P1,n-1,m,3);
		}
		if (m > 0)
		{
			Reduce( MapS.TilesUrl[tileId].P2,n,m-1,0);
		}
		if (n < Map.N -1)
		{
			Reduce( MapS.TilesUrl[tileId].P3,n+1,m,1);
		}
		if (m < Map.M-1)
		{
			Reduce( MapS.TilesUrl[tileId].P0,n,m+1,2);
		}
	}
	private void  EvaluateBeginning(int n, int m )
	{
		
		long   tileId =mapOfTile[n][m].Type;
		
		if (n > 0)
		{
			Reduce( MapS.TilesUrl[tileId].P1,n-1,m,3);
		}
		if (m > 0)
		{
			Reduce( MapS.TilesUrl[tileId].P2,n,m-1,0);
		}
		if (n < Map.N -1)
		{
			Reduce( MapS.TilesUrl[tileId].P3,n+1,m,1);
		}
		if (m < Map.M-1)
		{
			Reduce( MapS.TilesUrl[tileId].P0,n,m+1,2);
		}
	}

	public void Stop()
	{
		CanWork = false;

	}
}