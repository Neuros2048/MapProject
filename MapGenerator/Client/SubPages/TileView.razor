@using Shared.DTO
@using Client.Services

@inject MapService MapS
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorageService

	

<div class="d-flex justify-content-evenly">
	<div class="d-flex flex-column">
		
		<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: auto">
			<div class="card-body p-5 ">
				<div class="input-group">
					<div class="custom-file">
						<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
						
					</div>
				</div>

				@if (imageToProces.Any())
				{
					<EditForm Model="creatTile" OnSubmit="CreateTile">
					<div class="d-flex flex-column justify-content-center ">
						<div class="text-center">
							<div>
                            									
                            									<InputText id="p1" @bind-Value="creatTile.P1" class="from-control"/>
                            								</div>
								<div class="text-center">  @creatTile.P1</div>
							<div class="d-flex justify-content-center  align-items-center ">
								<div class=" p-1">
								
									<InputText id="p2" @bind-Value="creatTile.P2" class="from-control"/>
								</div>
								<div class="rotated-270 p-1">  @creatTile.P2</div>
								<img class="fix-size-100 text-center p-1" src="@imageToProces.First()" alt=""/>
									<div class="rotated-90 p-1">  @creatTile.P0</div>
								<div class="p-1">
						
									<InputText id="p0" @bind-Value="creatTile.P0" class="from-control"/>
								</div>
							</div>
								<div class="text-center">  @creatTile.P3</div>
							<div>
                            									
                            	<InputText id="p3" @bind-Value="creatTile.P3" class="from-control"/>
                            </div>
							
							<div>
                            	
                            	<InputSelect id="sym" @bind-Value="creatTile.TileSetId">
                            		<option value=0>Bez obrotu</option>
                            		<option value=1>obrut 90 stopni</option>
                            		<option value=2>4 obroty</option>
                            	</InputSelect>
                            </div>
						</div>
					</div>
						

						
							
								
								
								

								<div class="d-flex justify-content-center">
                                	<button type="submit" class="btn btn-primary  w-100 my-4 mb-2">Confirm</button>
                                	<div style="width: 5px	"></div>
                                <button type="button" class="btn btn-danger  w-100 my-4 mb-2" onclick="@RemoveImage">Anuluj</button>
                                </div>
								

							</EditForm>


							}
						</div>
		</div>

		<div style="height: 10px"></div>
				@if (Edit)
				{
				
					<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: auto">
						<div class="card-body p-5 ">
							
							<EditForm Model="editTile" OnSubmit="SubmitEdit">
								
								<div class="d-flex flex-column justify-content-center ">
										<div class="text-center">
                                    									
                                    									<InputText id="p1" @bind-Value="editTile.P1" class="from-control"/>
                                    								</div>
									<div class="text-center"> @editTile.P1</div>
									<div class="d-flex justify-content-center  align-items-center">
										<div class="align-middle ">
                                        									
                                        									<InputText id="p2" @bind-Value="editTile.P2" class="from-control"/>
                                        								</div>
										<div class=" rotated-270"> @editTile.P2</div>
										<img class="fix-size-100 " src="@MapS.TilesUrl[editTile.Id].Url" alt=""/>
										<div class="rotated-90"> @editTile.P0</div>
										<div class="align-middle">
											<InputText id="p0" @bind-Value="editTile.P0" class="from-control"/>
										</div>
									</div>
									<div class="text-center"> @editTile.P3</div>
									<div class="text-center">
                                    								
                                    	<InputText id="p3" @bind-Value="editTile.P3" class="from-control"/>
                                    </div>
								</div>
								
							
								
								
								<div class="d-flex justify-content-center">
									<button type="submit" class="btn btn-primary  w-100 my-4 mb-2">Confirm</button>
									<div style="width: 5px	"></div>
								<button type="button" class="btn btn-danger  w-100 my-4 mb-2" onclick="@Anuluj">Anuluj</button>
								</div>
							</EditForm>

						</div>
					</div>
				}
		
	</div>
	<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: 18rem">
		<div class="card-body p-5 ">
			@if (tiles.Any())
			{
				<table class="table  table-bordered table-hover table-dark">
                		<thead class="table-dark">
					<tr>
						<th scope="col"  class="col-3 text-center">Image</th>
						<th scope="col"  class="col-1 text-center">Edytuj</th>
						<th scope="col"  class="col-1 text-center">Usuń</th>
					</tr>
					</thead>
					<tbody>
					@foreach (var t in tiles)
					{
						<tr>
							<td class="text-center align-middle table-primary "> <img class="fix-size-50" src="@MapS.TilesUrl[t.Id].Url" alt=""/> </td>
							
							<td class="text-center ">
                            						
                            	<i class="bi bi-pen-fill text-warning icon-responsive" style="font-size: 2rem;" @onclick="() => EditTile(t)" ></i>
                                                    
                            </td>
							<td class="text-center">
                            						
                            	<i class="bi bi-trash3-fill text-danger icon-responsive" style="font-size: 2rem;" @onclick="() => DeleteTile(t.Id)" ></i>
                            </td>
							
						</tr>
					}
					</tbody>
				</table>
			}
		</div>
		</div>
</div>





@code {
	
	[Parameter]
	public TileSetDto CurrSetDto { get; set; } = new TileSetDto();
	private List<string> imageToProces = new List<string>();
	private TileDto creatTile = new TileDto();
	[Parameter]
	public List<TileDto> tiles { get; set; } = new List<TileDto>();

	private bool Edit = false;
	private TileDto editTile = new TileDto();
	
	[Parameter] public Action? Change { get; set; }
	async Task OnChange(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles(30); 
		foreach (var file in files)
		{
			var resizedFile = await file.RequestImageFileAsync(file.ContentType, 480, 480);
			var buf = new byte[resizedFile.Size];
			using (var stream = resizedFile.OpenReadStream())
			{
				var dotnetImageStream = new DotNetStreamReference(stream);
				imageToProces.Add(await Js.InvokeAsync<string>("addImage", dotnetImageStream));
			}
		}
	}
	
	private async Task CreateTile()
    {
	    Console.WriteLine(creatTile.P0);
	    string?[] connection = new[] { creatTile.P0,creatTile.P1,creatTile.P2,creatTile.P3};
	    Console.WriteLine("hejos2");
	    string url = imageToProces.First();
	    int symmetry = (int )creatTile.TileSetId;
	    creatTile.TileSetId = CurrSetDto.Id;
	    Console.WriteLine("hejos232");
	    switch (symmetry)
	    {
		    case 0:
			    creatTile = await MapS.AddTile(creatTile, url);
			    break;
		    case 1:
			    creatTile = await MapS.AddTile(creatTile, url);
			    tiles.Add(creatTile);
			
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[1];
			    creatTile.P1 = connection[2];
			    creatTile.P2 = connection[3];
			    creatTile.P3 = connection[0];
			    creatTile = await MapS.AddTile(creatTile, url);
			    
			  
			    break;
		    case 2:
			    creatTile = await MapS.AddTile(creatTile, url);
			    tiles.Add(creatTile);
			
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[1];
			    creatTile.P1 = connection[2];
			    creatTile.P2 = connection[3];
			    creatTile.P3 = connection[0];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[2];
			    creatTile.P1 = connection[3];
			    creatTile.P2 = connection[0];
			    creatTile.P3 = connection[1];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[3];
			    creatTile.P1 = connection[0];
			    creatTile.P2 = connection[1];
			    creatTile.P3 = connection[2];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    break;
			    
	    }
	    
	    
	    imageToProces.RemoveAt(0);
	    creatTile = new TileDto();
	    Change!.Invoke();
    }

	private void RemoveImage()
	{
		imageToProces.RemoveAt(0);
	}

	private void EditTile(TileDto tileDto)
	{
		editTile = tileDto;
		
		Edit = true;
	}

	private async void DeleteTile(long tileId)
	{
			
		await MapS.DeleteTile(tileId);
		Change!.Invoke();
	}

	private async void SubmitEdit()
	{
		
		Edit = false;
		for (int i = 0; i < tiles.Count; i++)
		{
			if (tiles[i].Id == editTile.Id)
			{
				tiles[i] = editTile;
				break;
			}
		}
		await MapS.UpdateTile(editTile);

	}

	private void Anuluj()
	{
		Edit = false;
	}


}