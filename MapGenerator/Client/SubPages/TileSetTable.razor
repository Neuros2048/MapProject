@using Client.Services
@using Shared.DTO

@inject MapService MapS

<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: 40rem">
<div class="card-body p-5 ">
	<table class="table table-striped table-bordered table-hover table-dark">
		<thead class="table-dark">
		<tr>
			<th scope="col" class="col-3 text-center" >Nazwa zbiory</th>
			@if (Look)
			{
				<th scope="col"  class="col-1 text-center">Zobacz</th>
			}
			@if (Edit)
			{
				<th scope="col" class="col-1 text-center">Edytuj</th>
			}
			@if (Delete)
			{
				<th scope="col" class="col-1 text-center">Usun</th>
			}
		</tr>
		</thead>
		<tbody>
		@foreach (var ts in MapS.TileSetDtos)
		{
			<tr>
				<td class="text-center align-middle font" style="font-size: 2rem;">
					<div>@ts.Name</div> </td>
				@if (Look)
				{
					<td class="text-center">
						
						<i class="bi bi-eye-fill text-green icon-responsive" style="font-size: 2rem;" @onclick="() => ChoseToLook(ts)"></i>
					</td>
				}
				@if (Edit)
				{
					<td class="text-center">
						
						<i class="bi bi-pen-fill text-warning icon-responsive" style="font-size: 2rem;" @onclick="() => ChoseToEdit(ts)" ></i>
                        					
					</td>
					
				}
				@if (Delete)
				{
					<td class="text-center">
						
						<i class="bi bi-trash3-fill text-danger icon-responsive" style="font-size: 2rem;" @onclick="() => ChoseToDelete(ts)" ></i>
					</td>
				}
			</tr>
		}
		</tbody>
	</table>
</div>
</div>



@code {
	[Parameter]
	public bool Look { get; set; }
	[Parameter]
	public bool Edit { get; set; }
	[Parameter]
	public bool Delete { get; set; }
	[Parameter]
    public Action<TileSetDto>? LookTileSet { get; set; }
	[Parameter]
	public Action<TileSetDto>? EditTileSet { get; set; }
	[Parameter]
	public Action<TileSetDto>? DeleteTileSet { get; set; }
	
	protected override async void OnInitialized()
	{
	   
		await MapS.TileSets2();
		this.StateHasChanged();
	}
	
	private void ChoseToLook(TileSetDto ts)
	{
		LookTileSet?.Invoke(ts);
	}

	private void ChoseToEdit(TileSetDto ts)
	{
		EditTileSet?.Invoke(ts);
	}

	private void ChoseToDelete(TileSetDto ts)
	{
		DeleteTileSet?.Invoke(ts);
	}

}