@using Shared.DTO
@using Client.Logic


@switch (Postep)
{
    case -1 :

        break;
    case 0 : 
        <div class="progress">
        <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 5%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">5%</div>
    </div>
    break;
    case 1 : 
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 15%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">15%</div>
        </div>
        break;
    case 2 : 
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 50%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">50%</div>
        </div>
        break;
    case 3 : 
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 75%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">75%</div>
        </div>
        break;
        
}


@code {
    private PolygonMapDto polygonMapDto;
    private int _lastHeigth = -1;
    private int _lastWidth = -1;
    private int _poligonNum = -1;
    private int _lastSeed = -1;
    private int Postep = -1;
    private bool changedSeed = false;
    private bool changedPolygon = false;
    private bool working = true;

    private float[,] nois;
    
    [Parameter]
    public  Action <Poly2.Center> PolygonToDraw { get; set; }
    [Parameter]
    public Action ClearMap { get; set; }
    [Parameter]
    public Action<CanvasPolygon.LandTypes> ChangFill { get; set; }




    public void Stop()
    {
        working = false;
    }
    public async Task SolveMap(PolygonMapDto polygonMapDto)
    {
        this.polygonMapDto = polygonMapDto;
        ClearMap.Invoke();
        await Task.Delay(1);
        Postep = 0;
        this.StateHasChanged();
        changedSeed = true;
        changedPolygon = true;
        working = true;
        if(polygonMapDto.Height == _lastHeigth && polygonMapDto.Width == _lastWidth && polygonMapDto.Polygons == _poligonNum )
        {
            changedPolygon = false;
        }

        if (polygonMapDto.Height == _lastHeigth && polygonMapDto.Width == _lastWidth && polygonMapDto.Seed == _lastSeed)
        {
            changedSeed = false;
        }
      
        _lastHeigth = polygonMapDto.Height;
        _lastWidth = polygonMapDto.Width;
        _poligonNum = polygonMapDto.Polygons ;
        _lastSeed = polygonMapDto.Seed;
        
        if (changedSeed)
        {
            SimplexNoise.Noise.Seed = polygonMapDto.Seed;
            nois = SimplexNoise.Noise.Calc2D(_lastWidth, _lastHeigth, 0.001f);
        }
        if(! working) return;
        Postep = 1;
        this.StateHasChanged();



        if (changedPolygon || changedSeed)
        {
            await CalculatePolygons();
        }
        if(! working) return;
        Postep = 3;
        

        await DrawMap();
        Postep = -1;
        this.StateHasChanged();

    }

    private List<Point> points;
    private List<Poly2.Center> centers;
    private async Task CalculatePolygons()
    {
        
        Random rnd = new Random(_lastSeed);
        
       
        List<Point> points = new List<Point>();
        for (int i = 0; i < _poligonNum; i++)
        {
            points.Add( new Point(rnd.Next(_lastWidth), rnd.Next(_lastHeigth)));
        }
        
       
        
        centers = new List<Poly2.Center>();
        //        points.Select(x => new Poly2.Point((int)x.X, (int)x.Y)).ToList()
        points.ForEach(p=> centers.Add(new Poly2.Center(new Poly2.Point((int)p.X*100, (int)p.Y*100),_lastWidth*100,0,_lastHeigth*100,0)));
        
        
        var solver = new Poly2(_lastWidth*100,0,_lastHeigth*100,0);
        centers = solver.Solve(centers);
        Postep = 2;
        this.StateHasChanged();
        ResizeCenters();
        centers = solver.Solve(centers);
        
    }


    private void ResizeCenters()
    {
        foreach (var pol in centers)
        {
            pol.P.X = 0;
            pol.P.Y = 0;
            var a = pol.E;
            var next = a;
            int ile = 0;
            do
            {
                ile++;
                pol.P.X += next.Point.X;
                pol.P.Y += next.Point.Y;
                next = next.Next;
            } while (a != next);

            pol.P.X /= ile;
            pol.P.Y /= ile;

        }
        if(! working) return;
        for (int i = 0; i < centers.Count; i++)
        {
            centers[i] = new Poly2.Center(centers[i].P, _lastWidth*100, 0, _lastWidth*100, 0);
        }
    }
    
    
     
    

   

    
    
    private async Task DrawMap()
    {
        
        
        
        foreach (var pol in centers)
        {
           // await _canvasPolygon.ChangeColorLine(j++);
           if(! working) return;
            var a = pol.E;
            var next = a;
            var px = pol.P.X / 100;
            var py = pol.P.Y / 100;
            //Console.WriteLine($"{wight}  {height}");
            double dis = nois[px, py] - Distance(_lastWidth / 2, _lastHeigth / 2, px, py)*0.5 ;
            //Console.WriteLine($"{px} {py} {dis} {Distance(wight / 2, height / 2, px, py)*0.6}");
            double tp = 0;
            double d;
            double bdp = 0;
            double dsum = 0;
          
            foreach (var p in polygonMapDto.HumidityPoints)
            {
                d = Distance(p.X, p.Y, px, py);
                d = d < 1 ? 1 : d; 
                tp += 100 * p.Power / d;
            }

            foreach (var p in polygonMapDto.HeightPoints)
            {
                d = Distance(p.X, p.Y, px, py);
                d = d < 1 ? 1 : d; 
                bdp += 100 * p.Power / d;
            }
            if(! working) return;
            dsum = dis + bdp;
            if ( dsum > 200)
            {
               
                if (tp > 10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GorySnieg);
                }else if (tp > 5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GorySnieg);
                }
                else if(tp > -5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GoryTundra);
                }
                else if(tp > -10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Gory);
                }
                else
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GorySpalone);
                }
              
            }
            else if ( dsum > 135)
            {
                ;
                if (tp > 10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Tajga);
                }else if (tp > 5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Tajga);
                }
                else if(tp > -5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Zarosla);
                }
                else if(tp > -10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Zarosla);
                }
                else
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Pustynia);
                }
                
            }
            else if ( dsum > 65)
            {
               
                if (tp > 10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.LasDeszczowy);
                }else if (tp > 5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.LasLisciasty);
                }
                else if(tp > -5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.LasLisciasty);
                }
                else if(tp > -10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Trawy);
                }
                else
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Pustynia);
                }
                
            }
            else if ( dsum > 0)
            {
               
                if (tp > 10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GLasDeszczowy);
                }else if (tp > 5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GLas);
                }
                else if(tp > -5)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.GLas);
                }
                else if(tp > -10)
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Trawy);
                }
                else
                {
                    ChangFill.Invoke(CanvasPolygon.LandTypes.Sahara);
                }
                
            }
            else
            {
                if (dis > 0)
                {
                   ChangFill.Invoke(CanvasPolygon.LandTypes.Woda);
                }
                else
                {
                   ChangFill.Invoke(CanvasPolygon.LandTypes.Ocean);
                }
                
            }
     
            await Task.Delay(5);
            
            
            //var cos = PolygonToDraw.BeginInvoke(pol, null, null);
            //PolygonToDraw.EndInvoke(cos);
            if(! working) return;
            PolygonToDraw. Invoke (pol);
          
            await Task.Delay(5);
        }

       
    }

    private double Distance(double x1, double y1, double x2, double y2)
    {
        return Math.Sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }
    private double DistanceNoRoot(double x1, double y1, double x2, double y2)
    {
        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    }
    
    

   

    
    
    public struct Point
    {
        public double X, Y;
        public Point(double x, double y)
        {
            this.X = x;
            this.Y = y;
        }
        public Point()
        {
            this.X = 0;
            this.Y = 0;
        }
        public static Point operator +(Point a, Point b)
            => new Point(a.X+ b.X , a.Y + b.Y);

        public static Point operator -(Point a, Point b)
            => new Point(a.X- b.X , a.Y - b.Y);

        public static Point operator *(Point a, double b)
            => new Point(a.X* b , a.Y * b);
        public Point rot() {
            return new Point(-Y,X);
        }
        public double len() {
            return Double.Hypot(X,Y);
        }
    }
    
    
    
}