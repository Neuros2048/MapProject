@using Shared.DTO
@using Client.Services

@inject MapService MapS
@inject IJSRuntime Js
@if (_chosen)
{
	<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: 40rem">
	<div class="card-body p-5 ">
		<table class="table table-striped table-bordered table-hover table-dark">
        		<thead class="table-dark">
			<tr>
				<th scope="col"  class="col-3 text-center">Nazwy Map</th>
				<th scope="col"  class="col-1 text-center">Zobacz</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var tm in _generatedMap)
			{
				<tr>
					<td class="text-center">
						<div>@tm.Name</div> </td>
					<td class="text-center">
                    						
                    	<i class="bi bi-eye-fill text-green icon-responsive" style="font-size: 2rem;" @onclick="() =>SetMap(tm)"></i>
                    </td>
					
				</tr>
			}
		</tbody>
		</table>
		</div>
	</div>
}

@code {
	private List<GeneratedMapDto> _generatedMap = new List<GeneratedMapDto>();
	[Parameter]
	public Action<GeneratedMapDto>? ChosenMap { get; set; }

	private bool _chosen = false;
	public async Task SetCurrSet(TileSetDto tileSetDto)
	{
	    
		await MapS.GetBaseTile();
		await MapS.GetTilesToHash(tileSetDto.Id);
		_generatedMap = await MapS.GetMaps(tileSetDto.Id);
		_chosen = true;
		StateHasChanged();
	}

	private void SetMap(GeneratedMapDto generatedMapDto)
	{
		ChosenMap?.Invoke(generatedMapDto);
	}
	
	

}