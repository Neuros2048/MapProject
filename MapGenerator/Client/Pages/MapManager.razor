@page "/MapManager"
@using Client.Services
@using Shared.DTO
@inject MapService MapS
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorageService

<h3>MapManager</h3>
<button type="submit" class="btn btn-primary" onclick="@CreateSetTrue">Stworz nowy zbior</button>
@if (creatSet)
{
	<EditForm Model="tileSetDto" OnSubmit="CreateSet">
		<div>
			<label for="tsname">Nazwa</label>
			<InputText id="tsname" @bind-Value="tileSetDto.Name" class="from-control" />
		</div>
		<button type="submit" class="btn btn-primary">Potwierdz</button>
	</EditForm>
}
@if (sets)
{

	<table class="table">
		<thead>
			<tr>
				<th>Nazwa zbiory</th>
				<th>Edytuj</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var ts in _tileSetDtos)
			{
				<tr>
					<td>
						<div>@ts.Name</div> </td>
					<td>
						<button class="btn btn-primary"
						        @onclick="(() => SetCurrSet(ts))">
							<i class="oi oi-pencil"></i>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
@if (CurrSetDto.Id != 0)
{
	
	<div class="input-group">
		<div class="custom-file">
			<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
			<label class="custom-file-label" for="inputFile">Dodaj grafike pola</label>
		</div>
	</div>

	@if (imageToProces.Any())
	{
		<img class="fix-size" src="@imageToProces.First()" alt=""/>
		<EditForm Model="creatTile" OnSubmit="CreateTile">
			<div>
				<label for="p0">left</label>
				<InputText id="p0" @bind-Value="creatTile.P0" class="from-control" />
			</div>
			<div>
				<label for="p1">Up</label>
				<InputText id="p1" @bind-Value="creatTile.P1" class="from-control" />
			</div>
			<div>
				<label for="p2">Right</label>
				<InputText id="p2" @bind-Value="creatTile.P2" class="from-control" />
			</div>
			<div>
				<label for="p3">Down</label>
				<InputText id="p3" @bind-Value="creatTile.P3" class="from-control" />
			</div>
		
			<div>
				<label for="sym">Symmetry</label>
				<InputSelect id="sym" @bind-Value="creatTile.TileSetId">
					<option value=0 >Bez obrotu</option>
					<option value=1 >obrut 90 stopni</option>
					<option value=2 >4 obroty</option>
				</InputSelect>
			</div>
			<button type="submit" class="btn btn-primary">Confirm</button>
		
		</EditForm>
		
		
	}
	<h3>@CurrSetDto.Id	</h3>
	<h3>@CurrSetDto.Name </h3>
	@if (tiles.Any())
	{
		<table class="table">
			<thead>
			<tr>
				<th>Image</th>
				<th>Edytuj</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var t in tiles)
			{
				<tr>
					<td> <img src="@t.Url" alt=""/> </td>
					<td>
                    	<button class="btn btn-primary"
                    	        @onclick="EditTile">
                    		<i class="oi oi-pencil"></i>
                    	</button>
                    </td>
				</tr>
			}
			</tbody>
		</table>
	}
}


@code {
    private TileSetDto tileSetDto = new TileSetDto();
    private TileSetDto CurrSetDto = new TileSetDto();
    private List<TileSetDto> _tileSetDtos { get; set; } =new List<TileSetDto>();
    private bool sets = false;
    private bool creatSet = false; 
    public async Task CreateSet()
    {
        var res = await MapS.CreateTileSet(tileSetDto);
        if(res == null) return;
        tileSetDto = new TileSetDto();
        CurrSetDto = res;
        creatSet = false;
    }

    private void CreateSetTrue()
    {
	    creatSet = true;
    }
    private async Task SetCurrSet(TileSetDto tileSetDto)
    {
	    var res = await MapS.GetTiles(tileSetDto.Id);
	    foreach (var t in res)
	    {
		   
		  
		    var url = await LocalStorageService.GetItemAsStringAsync("tile_" + t.Id);
		    if (string.IsNullOrEmpty(url))
		    {
			    Stream stream = new MemoryStream(t.Image);
			    var dotnetImageStream = new DotNetStreamReference(stream);
			    url = await Js.InvokeAsync<string>("addImage", dotnetImageStream);
			    await LocalStorageService.SetItemAsync("tile_" + t.Id, url);
		    }

		    t.Image = null;
		    t.Url = url;
		    tiles.Add(t);
	    }
	    CurrSetDto = tileSetDto;
	    
    }
    protected override async void OnInitialized()
    {
	    _tileSetDtos =  await MapS.TileSets();
	    sets = true;
	    this.StateHasChanged();
    }

    private List<string> imageToProces = new List<string>();
    async Task OnChange(InputFileChangeEventArgs e)
    {
	    var files = e.GetMultipleFiles(); 
	    foreach (var file in files)
	    {
		    var resizedFile = await file.RequestImageFileAsync(file.ContentType, 480, 480);
		    var buf = new byte[resizedFile.Size];
		    using (var stream = resizedFile.OpenReadStream())
		    {
			    var dotnetImageStream = new DotNetStreamReference(stream);
			    imageToProces.Add(await Js.InvokeAsync<string>("addImage", dotnetImageStream));
		    }
	    }
    }

    private TileDto creatTile = new TileDto();
    private List<TileDto> tiles = new List<TileDto>();
    
    private async Task CreateTile()
    {
	    Console.WriteLine();
	    string?[] connection = new[] { creatTile.P0,creatTile.P1,creatTile.P2,creatTile.P3};
	    string url = imageToProces.First();
	    int symmetry = (int )creatTile.TileSetId;
	    creatTile.TileSetId = CurrSetDto.Id;
	    
	    switch (symmetry)
	    {
		    case 0:
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    break;
		    case 1:
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[3];
			    creatTile.P1 = connection[0];
			    creatTile.P2 = connection[1];
			    creatTile.P3 = connection[2];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			  
			    break;
		    case 2:
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[3];
			    creatTile.P1 = connection[0];
			    creatTile.P2 = connection[1];
			    creatTile.P3 = connection[2];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[2];
			    creatTile.P1 = connection[3];
			    creatTile.P2 = connection[0];
			    creatTile.P3 = connection[1];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    url = await Js.InvokeAsync<string>("rotateImage90", url);
			    creatTile.P0 = connection[1];
			    creatTile.P1 = connection[2];
			    creatTile.P2 = connection[3];
			    creatTile.P3 = connection[0];
			    creatTile = await MapS.AddTile(creatTile, url);
			    await LocalStorageService.SetItemAsync("tile_"+creatTile.Id, url);
			    creatTile.Url = url;
			    tiles.Add(creatTile);
			    
			    break;
	    }
	    
	    
	    imageToProces.RemoveAt(0);
    }

    public void EditTile()
    {
	    
    }
}