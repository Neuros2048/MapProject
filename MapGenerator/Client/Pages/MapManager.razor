@page "/MapManager"
@using Client.Services
@using Shared.DTO
@using Client.SubPages
@inject MapService MapS
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorageService


<h3>MapManager</h3>
<button type="submit" class="btn btn-primary" onclick="@CreateSetTrue">Stworz nowy zbior</button>
@if (creatSet)
{
	<EditForm Model="tileSetDto" OnSubmit="CreateSet">
		<div>
			<label for="tsname">Nazwa</label>
			<InputText id="tsname" @bind-Value="tileSetDto.Name" class="from-control" />
		</div>
		<button type="submit" class="btn btn-primary">Potwierdz</button>
	</EditForm>
}


<TileSetTable Look="false" Edit="true" Delete="true" EditTileSet="SetCurrSet"  DeleteTileSet="DeleteCurrSet" ></TileSetTable>

@if (CurrSetDto.Id != 0)
{
	<TileView CurrSetDto="CurrSetDto"  tiles="tiles" Change="Change"></TileView>
}


@code {
    private TileSetDto tileSetDto = new TileSetDto();
    private TileSetDto CurrSetDto = new TileSetDto();
    private List<TileDto> tiles = new List<TileDto>();
    private List<TileSetDto> _tileSetDtos { get; set; } =new List<TileSetDto>();
    private bool sets = false;
    private bool creatSet = false; 
    
    public async Task CreateSet()
    {
        var res = await MapS.CreateTileSet(tileSetDto);
        if(res == null) return;
        tileSetDto = new TileSetDto();
        CurrSetDto = res;
        creatSet = false;
    }

    private void CreateSetTrue()
    {
	    creatSet = true;
    }
    private async void SetCurrSet(TileSetDto tile)
    {
	    
	    await MapS.GetTilesToHash(tile.Id);
	    tiles = await MapS.GetTiles(tile.Id);
	    CurrSetDto = tile;
	    StateHasChanged();
    }
    private async void DeleteCurrSet(TileSetDto tile)
    {
	    await MapS.DeleteTileSet(tile.Id);
	    _tileSetDtos =  await MapS.TileSets();
	    sets = true;
	    this.StateHasChanged();
    }
    protected override async void OnInitialized()
    {
	    _tileSetDtos =  await MapS.TileSets();
	    sets = true;
	    this.StateHasChanged();
    }

    private async void Change()
    {
	    await MapS.GetTilesToHash(CurrSetDto.Id);
	    tiles = await MapS.GetTiles(CurrSetDto.Id);
	  
    }
    
   
   
}