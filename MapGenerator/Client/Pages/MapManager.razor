@page "/MapManager"
@using Client.Services
@using Shared.DTO
@using Client.SubPages
@inject MapService MapS
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorageService

<button @onclick="CopyBaseSet" class="btn btn-danger w-100 my-4 mb-2 ">Copt</button>
<div class="  text-white d-flex flex-row align-items-center justify-content-center" >
	<div class="card bg-nice-black text-white" style="border-radius: 1rem; width: 18rem">
		<div class="card-body p-5 ">
			<div class="mb-3 ">
				<button type="submit" class="btn btn-primary w-100 my-4 mb-2 " onclick="@CreateSetTrue">Stworz nowy zbior</button>
			</div>
			@if (creatSet)
			{
				<EditForm Model="tileSetDto" OnSubmit="CreateSet">
					<div>
						<div class="mb-2 ">
							<InputText id="tsname" @bind-Value="tileSetDto.Name" class="from-control" placeholder="Nazwa"/>
						</div>
					</div>
					<div class="  text-white d-flex flex-row align-items-center justify-content-center" style="border-radius: 1rem;">
						<button type="submit" class="btn btn-primary w-100 my-4 mb-2 ">Potwierdz</button>
						<div  style="width:10px"></div>
						<button onclick="@ResetSet" class="btn btn-danger w-100 my-4 mb-2 ">anuluj</button>
					</div>
				</EditForm>
			}
		</div>
	</div>
	<div  style="width :20px"></div>
	<TileSetTable Look="false" Edit="true" Delete="true" EditTileSet="SetCurrSet"  DeleteTileSet="DeleteCurrSet" ></TileSetTable>
</div>
<div  style="height :20px"></div>
@if (CurrSetDto.Id != 0)
{
	<TileView CurrSetDto="CurrSetDto"  tiles="tiles" Change="Change"></TileView>
}


@code {
    private TileSetDto tileSetDto = new TileSetDto();
    private TileSetDto CurrSetDto = new TileSetDto();
    private List<TileDto> tiles = new List<TileDto>();
    private List<TileSetDto> _tileSetDtos { get; set; } =new List<TileSetDto>();
    private bool sets = false;
    private bool creatSet = false; 
    
    public async Task CreateSet()
    {
        var res = await MapS.CreateTileSet(tileSetDto);
        if(res == null) return;
        tileSetDto = new TileSetDto();
        CurrSetDto = res;
        creatSet = false;
    }
    private void ResetSet()
    {
	    creatSet = false;
    }

    private void CreateSetTrue()
    {
	    creatSet = true;
    }
    private async void SetCurrSet(TileSetDto tile)
    {
	    
	    await MapS.GetTilesToHash(tile.Id);
	    tiles = await MapS.GetTiles(tile.Id);
	    CurrSetDto = tile;
	    StateHasChanged();
    }
    private async void DeleteCurrSet(TileSetDto tile)
    {
	    await MapS.DeleteTileSet(tile.Id);
	    _tileSetDtos =  await MapS.GetTileSets();
	    sets = true;
	    this.StateHasChanged();
    }
    protected override async void OnInitialized()
    {
	    _tileSetDtos =  await MapS.GetTileSets();
	    sets = true;
	    this.StateHasChanged();
    }

    private async void Change()
    {
	    await MapS.GetTilesToHash(CurrSetDto.Id);
	    tiles = await MapS.GetTiles(CurrSetDto.Id);
	  
    }

    private async void CopyBaseSet()
    {
	     await MapS.CopyTileSet(3);
    }
    
   
   
}