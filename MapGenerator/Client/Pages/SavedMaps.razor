@page "/SavedMaps"
@using Client.Services
@using Shared.DTO
@using Client.SubPages

<h3>MapGenerator</h3>
@inject MapService MapS
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorageService


<TileSetTable Look="true"  LookTileSet="@SetCurrSet" ></TileSetTable>
<SaveMapTable @ref="_saveMapTable" ChosenMap="MakeMap"> </SaveMapTable>

@if (ok)
{	
	@for (int i = 0; i <  Map.TileWeightDtos.Count; i++)
	{
		<img id="tileidurl_@Map.TileWeightDtos[@i].TileId" width="10" height="10" style="display:none" src="@MapS.TilesUrl[Map.TileWeightDtos[@i].TileId].Url" />
	}
	<CanvasPage @ref="_context"> </CanvasPage>
}
<TileMapSolver @ref="_tileMapSolver" Map="@Map" TileToSet="SetTile"> </TileMapSolver>
@code {
	private readonly string tileKey = "tile_";
	private List<TileSetDto> _tileSetDtos = new List<TileSetDto>();
	private SaveMapTable? _saveMapTable;
	private TileMapSolver? _tileMapSolver;
	private CanvasPage _context;
    protected override async void OnInitialized()
    {
	   
	    _tileSetDtos = await MapS.TileSets();
	    this.StateHasChanged();
    }
    private TileSetDto CurrSetDto = new TileSetDto();
    
    private async void SetCurrSet(TileSetDto tileSetDto)
    {
	    await _saveMapTable.SetCurrSet(tileSetDto);
	    CurrSetDto = tileSetDto;
	    await MapS.GetTilesToHash(tileSetDto.Id);
    }
	
    private GeneratedMapDto Map = new GeneratedMapDto();
    bool ok = false;

    private async void MakeMap(GeneratedMapDto generatedMapDto)
    {
	    ok = false;
	    Map = await MapS.GetMap(generatedMapDto.Id);
	    
	    ok = true;
	    this.StateHasChanged();
	    await PrepareMap();
	    await Task.Delay(1);
	    //await SetSettedTiles();
	    await _tileMapSolver.SetedTiles();
	    await _tileMapSolver.GenerateMap();
    }
    private async void SetTile(SetTileDto setTileDto)
    { 
	    
	    await _context.SetTile(setTileDto.M, setTileDto.N, setTileDto.TileId,10);    
    }
		
    protected async Task PrepareMap()
    {
	    await _context.Resize(Map.M * 10 , Map.N * 10);
	    
    }
}