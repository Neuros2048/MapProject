@page "/Register"
@using Client.Services
@using Shared.DTO
@using Shared.Response.SuccessRespond

@inject AuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<section class="vh-100">
  <div class="container py-5 h-100">
    <div class="row d-flex align-items-center justify-content-center h-100">
        
        <div class="card bg-nice-black text-white" style="border-radius: 1rem;">
            <div class="card-body p-5 ">
                <EditForm Model="RegisterDto" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-4 ">
                        <InputText @bind-Value="RegisterDto.Email" id="email"  placeholder="e-mail" class="form-control"></InputText>
                    </div>
                    <div class="mb-4 ">
                    <InputText @bind-Value="RegisterDto.Username" id="username" placeholder="Nazwa Urzytkownika" class="form-control"></InputText>
                    </div>
                    <div class="mb-4 ">
                    <InputText @bind-Value="RegisterDto.Password" id="password" placeholder="Hasło" type="password" class="form-control"></InputText>
                    </div>
                    <div class="mb-4 ">
                        <InputText @bind-Value="RegisterDto.ConfirmPassword" id="confirmpassword"  placeholder="Podtwierdz hasło" type="password" class="form-control"></InputText>
                    </div>
                    <div class="text-center d-flex justify-content-center align-items-center"> 
                                                @if (logging)
                                                {
                                                    <div class="loader"></div>
                                                }
                                                @if (!string.IsNullOrEmpty(message))
                                                {
                                                    
                                                    <div class="card  bg bg-danger flex-fill bg-opacity-50 text-white d-flex flex-row align-items-center justify-content-center" style="border-radius: 1rem;">
                                                       
                                                      
                                                        <p class="mb-0">@message</p>
                                                       <div  style="width:10px"></div>
                                                       <a class="bi bi-x " onclick="@ResetMassage" style="font-size: 24px;"></a>
                                                   
                                                    </div>
                                                }
                                                </div>
                        <button type="submit" class="btn btn-primary w-100 my-4 mb-2" >Zarejestru się</button>
                
                    </EditForm>    
                
                
      
            </div>
        </div>
        
    </div>
  </div>
</section>


<div>
    <EditForm Model="RegisterDto" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>Login:</p>
        <InputText @bind-Value="RegisterDto.Email" id="email" class="form-control"></InputText>
        <p>Username:</p>
        <InputText @bind-Value="RegisterDto.Username" id="username" class="form-control"></InputText>
        <p>Hasło:</p>
        <InputText @bind-Value="RegisterDto.Password" id="password" type="password" class="form-control"></InputText>
         <p>Hasło:</p>
        <InputText @bind-Value="RegisterDto.ConfirmPassword" id="confirmpassword" type="password" class="form-control"></InputText>
        <br/>
        <button type="submit" class="btn btn-primary w-100 my-4 mb-2" >Zarejestru się</button>

    </EditForm>
    
    @if (logging)
    {
        <div class="loader"></div>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
</div>

@code {

    private RegisterDto RegisterDto = new RegisterDto();
    private string message = string.Empty;
    private bool logging = false;

    private async Task HandleRegister()
    {
        logging = true;
        message = string.Empty;
        var result = await AuthService.Register(RegisterDto);
        if (result is SuccessResult)
        {
            logging = false;
            message = "Rejestracja zokończona poprawnie";
            NavigationManager.NavigateTo("login");
        }
        else
        {
            logging = false;
            message = "Rejestracja zakończona niepowodzeniem";
        }
    }
    private void ResetMassage()
    {
        message = string.Empty;
    }


}