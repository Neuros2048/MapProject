@page "/PolygonMap"
@using Client.SubPages
@using System.Numerics
@using System.Drawing
@using Client.Logic
@using Client.Services
@inject PolygonMapService Pms
<h3>PolygonMap</h3>
<button type="submit" class="btn btn-primary" onclick="@GenMap">Niech isę stanie </button>
<div  class="graphicFiled">
<CanvasPolygon @ref="_canvasPolygon" OnMouseClick="OnMouseClick"></CanvasPolygon></div>
<button type="submit" class="btn btn-primary" onclick="@Clear">Wyczysc </button>

@code {
    private CanvasPolygon _canvasPolygon = null!;

    private async void OnMouseClick(CanvasPolygon.Pos pos)
    {
        await _canvasPolygon.DrawPoint(pos.X, pos.Y);
    }

    private async void GenMap()
    {
        Random rnd;
        int seed = (int)DateTime.Now.Ticks & 0x0000FFFF;
        rnd = new Random(seed);
        int wight = _canvasPolygon.GetWight();
        int height = _canvasPolygon.GetHeight();
        Console.WriteLine("hej");
        await _canvasPolygon.DrawPoint(400,400);
        int pn = 200;
        await _canvasPolygon.ClearMap();
        List<PolygonMapService.Point> points = new List<PolygonMapService.Point>();
        ;/*{
            
        };*/
        for (int i = 0; i < pn; i++)
        {
            points.Add( new PolygonMapService.Point(rnd.Next(wight), rnd.Next(height)));
            //await _canvasPolygon.DrawPoint(rnd.Next(wight), rnd.Next(height));
        }
        // 
        foreach (var ps in points)
        {
            Console.WriteLine($"puntk {ps.X} {ps.Y}");
        }
      
        
        List<Poly2.Center> centers = new List<Poly2.Center>();
        //        points.Select(x => new Poly2.Point((int)x.X, (int)x.Y)).ToList()
        points.ForEach(p=> centers.Add(new Poly2.Center(new Poly2.Point((int)p.X, (int)p.Y),800,0,800,0)));
        
       
        centers = await drawCentres(centers);
        foreach (var pol in centers)
        {
            pol.P.X = 0;
            pol.P.Y = 0;
            var a = pol.E;
            var next = a;
            int ile = 0;
            do
            {
                ile++;
                pol.P.X += next.Point.X;
                pol.P.Y += next.Point.Y;
                next = next.Next;
            } while (a != next);

            pol.P.X /= ile;
            pol.P.Y /= ile;

        }

        for (int i = 0; i < centers.Count; i++)
        {
            centers[i] = new Poly2.Center(centers[i].P, 800, 0, 800, 0);
        }

        await Task.Delay(100);
        await drawCentres(centers);



    }

    private async Task<List<Poly2.Center>> drawCentres(List<Poly2.Center> centers)
    {
        
        var oper = new Poly2(800,0,800,0);
        centers = oper.Solve(centers);
        await _canvasPolygon.ClearMap();
        int j =0;
        foreach (var pol in centers)
        {
            await _canvasPolygon.ChangeColor(j++);
     
            var a = pol.E;
            var next = a;
            await _canvasPolygon.DrawPoint(pol.P.X, pol.P.Y);
            foreach (var p in pol.Points)
            {
                //await _canvasPolygon.Drawline(p.X, p.Y, pol.P.X, pol.P.Y);
            }
            do
            {
                await _canvasPolygon.Drawline( next.Previous.Point.X, next.Previous.Point.Y,next.Point.X, next.Point.Y);
                next = next.Next;
            } while (a != next);
            
        }

        return centers;
    }
    
    private async void Clear()
    {
        await _canvasPolygon.ClearMap();
    }

   

    
    
    
    
    
    
    
}