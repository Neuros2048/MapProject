@page "/PolygonMap"
@using Client.SubPages
@using System.Numerics
@using System.Drawing
@using Client.Logic
@using Client.Services
@inject PolygonMapService Pms
<h3>PolygonMap</h3>
<button type="submit" class="btn btn-primary" onclick="@GenMap">Niech isę stanie </button>
<div  class="graphicFiled">
<CanvasPolygon @ref="_canvasPolygon" OnMouseClick="OnMouseClick"></CanvasPolygon></div>
<button type="submit" class="btn btn-primary" onclick="@Clear">Wyczysc </button>

@code {
    private CanvasPolygon _canvasPolygon = null!;

    private async void OnMouseClick(CanvasPolygon.Pos pos)
    {
        await _canvasPolygon.DrawPoint(pos.X, pos.Y);
    }

    private async void GenMap()
    {
        Random rnd;
        int seed = (int)DateTime.Now.Ticks & 0x0000FFFF;
        rnd = new Random(seed);
        int wight = _canvasPolygon.GetWight();
        int height = _canvasPolygon.GetHeight();
        Console.WriteLine("hej");
        await _canvasPolygon.DrawPoint(400,400);
        int pn =3;

        List<PolygonMapService.Point> points = new List<PolygonMapService.Point>(){
            new PolygonMapService.Point(457, 131 ),
            new PolygonMapService.Point(173 ,317),
            new PolygonMapService.Point(260, 347)
        };
        /*for (int i = 0; i < pn; i++)
        {
            points.Add( new PolygonMapService.Point(rnd.Next(wight), rnd.Next(height)));
            //await _canvasPolygon.DrawPoint(rnd.Next(wight), rnd.Next(height));
        }*/
        // 243 793  163 397 360 740
        foreach (var ps in points)
        {
            Console.WriteLine($"puntk {ps.X} {ps.Y}");
        }
        var res = Pms.Solve(points);
        int j =0;
        foreach (var pol in res)
        {
            await _canvasPolygon.ChangeColor(j++);
            foreach (var p in pol.points)
            {
                await _canvasPolygon.Drawline((int)pol.P.X,(int) pol.P.Y, (int)p.X, (int)p.Y);
            }
            
        }
        

/*
    foreach (var r in res)
    {
        for (int i = 1; i < r.vertices.Count; i++)
        {
            Console.WriteLine(r.vertices[i].x );
        }
    }*/
       
        
        
    }

    private async void Clear()
    {
        await _canvasPolygon.ClearMap();
    }

   

    
    
    
    
    
    
    
}