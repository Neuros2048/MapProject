@page "/MapManagerfree"

@using Client.Services
@using Shared.DTO
@inject MapService MapS
@inject IJSRuntime Js
<h3>MapManager</h3>


<h1>@message</h1>

<div class="input-group">
	<div class="custom-file">
		<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
		<label class="custom-file-label" for="inputFile">Choose file</label>
	</div>

</div>

@foreach (var item in ImageUrls)
{
	<img src="@item" alt=""/>
}
<h1>aa</h1>
@foreach (var item in TilesUrls)
{
	<img src="@item" alt=""/>
}
<button @onclick="Genmap">
    Set Image
</button>

<button @onclick="SendImage">
    wysli obrazek
</button>
@if (toSet)
{
	<EditForm Model="toEdit" OnSubmit="HandleSubmit">
		<div>
			<label for="p0">left</label>
			<InputText id="p0" @bind-Value="toEdit.P0" class="from-control" />
		</div>
		<div>
			<label for="p1">Up</label>
			<InputText id="p1" @bind-Value="toEdit.P1" class="from-control" />
		</div>
		<div>
			<label for="p2">Right</label>
			<InputText id="p2" @bind-Value="toEdit.P2" class="from-control" />
		</div>
		<div>
			<label for="p3">Down</label>
			<InputText id="p3" @bind-Value="toEdit.P3" class="from-control" />
		</div>
		
		<div>
			<label for="sym">Symmetry</label>
			<InputSelect id="sym" @bind-Value="toEdit.simetri">
				<option value=0 >Bez obrotu</option>
				<option value=1 >oobrut 90 stopni</option>
				<option value=2 >4 obroty</option>
			</InputSelect>
			
		</div>
		
	
		<button type="submit" class="btn btn-primary">Confirm</button>
		
	</EditForm>
}


<table class="table">
    <thead>
        <tr>
            <th>Image</th>
			<th>Ustaw</th>
        </tr>

    </thead>
    <tbody>
        @foreach (var img in AddedImages)
        {
            <tr>
                <td> <img src="@img.Url" alt=""/> </td>
             
                <td>
                    <button class="btn btn-primary"
                    @onclick="(() => imageSets(img.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
            </tr>
        }

    </tbody>
    

</table>


@if (ok )
{

        @for (int i = 0; i < nMax	; i++)
        {
            <div class="image-grid">
                <div class="row">
                    @for (int j = 0; j < mMax; j++)
                    {
	                    @if (map[i][j].Type == -1)
	                    {
		                    <div class="col">
			                    <img class="" src="@TilesUrls[0 ]"  alt="" />
		                    </div>
	                    }
	                    else
	                    {
		                    <div class="col">
			                    <img class="" src="@(TilesUrls[ map[i][j].Type ])"  alt="" />
		                    </div>
	                    }
                        
                    }
                </div>
            </div>
        }
      
}
@code {

	string message = "InputFile";
	bool isDisabled = false;
	private List<string> ImageUrls { get; set; } = new List<string>();
	List<List<List<List<int>>>> dafuk;
	private List<TileData> AddedImages = new List<TileData>();
	private bool toSet;
	TileData toEdit;
	bool ok = false;
	async Task OnChange(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles(); // get the files selected by the users
		foreach (var file in files)
		{
			
			var resizedFile = await file.RequestImageFileAsync(file.ContentType, 480, 480); // resize the image file
			var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
			using (var stream = resizedFile.OpenReadStream())
			{
				var dotnetImageStream = new DotNetStreamReference(stream);
				
				AddedImages.Add(new TileData()
				{
					Id = AddedImages.Count(),
					Url = await Js.InvokeAsync<string>("addImage", dotnetImageStream)
				});
				//ImageUrls.Add(await Js.InvokeAsync<string>("addImage", dotnetImageStream));
			}
		}

	}

	private async Task HandleSubmit()
	{
		string[] connection = new[] { toEdit.P0,toEdit.P1,toEdit.P2,toEdit.P3 };
		string url;
		switch (toEdit.simetri)
		{
			case 0:
				TilesTypes.Add(connection);
				TilesUrls.Add(toEdit.Url);
				break;
			case 1:
				TilesTypes.Add(connection);
				TilesUrls.Add(toEdit.Url);
				connection = new[] { toEdit.P1,toEdit.P2,toEdit.P3,toEdit.P0 };
				url = toEdit.Url;
				
				Console.WriteLine("ahiia");
				Console.WriteLine("hii");
				url = await Js.InvokeAsync<string>("rotateImage90", url);
				Console.WriteLine(url);
				TilesTypes.Add(connection);
				TilesUrls.Add(url);
				break;
			case 2:
				TilesTypes.Add(connection);
				TilesUrls.Add(toEdit.Url);
				connection = new[] { toEdit.P1,toEdit.P2,toEdit.P3,toEdit.P0 };
				url = toEdit.Url;
				url = await Js.InvokeAsync<string>("rotateImage90", url);
				TilesTypes.Add(connection);
				TilesUrls.Add(url);
				connection = new[] { toEdit.P2,toEdit.P3,toEdit.P0,toEdit.P1 };
				url = await Js.InvokeAsync<string>("rotateImage90", url);
				TilesTypes.Add(connection);
				TilesUrls.Add(url);
				connection = new[] { toEdit.P3,toEdit.P0,toEdit.P1,toEdit.P2 };
				url = await Js.InvokeAsync<string>("rotateImage90", url);
				TilesTypes.Add(connection);
				TilesUrls.Add(url);
				break;
		}
	}
	private void imageSets(int id)
	{
		toEdit = AddedImages[id];
		toSet = true;
	}
	private List<string[]> TilesTypes = new List<string[]>();
	private List<string> TilesUrls = new List<string>();
	private Tilep[][] map;
	private int nMax;
	private int mMax;
	PriorityQueue<int[], int> q = new PriorityQueue<int[], int>();
	private async Task Genmap()
	{
		int n;
		n = 100;
		nMax = n;
		mMax = n;
		map = new Tilep[n][];
		for (int i = 0; i < n; i++)
		{
			map[i] = new Tilep[n];
		}
		Console.WriteLine(map[0][0] == null);
		

		List<int> allPossibilities = new List<int>();
		for (int i = 0; i < TilesTypes.Count(); i++)
		{
			allPossibilities.Add(i);
		}
		Console.WriteLine(TilesTypes.Count());
		for (int i = 0; i < nMax; i++)
		{
			for (int j = 0; j < mMax; j++)
			{
				map[i][j] = new Tilep
				{
					Possibilities = allPossibilities.ToList()
				};
			}
		}
		Console.WriteLine(TilesTypes[0][0]);
		Console.WriteLine("hej");
		q.Clear();
		q.Enqueue([4,7],1);
		int[] curr;
		while (q.Count > 0)
		{
			curr = q.Dequeue();
			Console.WriteLine(curr[0]+" "+curr[1]);
			Evaluate(curr[0],curr[1]);
		}
	
		
		for (int i = 0; i < nMax; i++)
		{
			for (int j = 0; j < mMax; j++)
			{
				Console.Write(map[i][j].Type);
				Console.Write(" ");
			}
			Console.WriteLine();
		}

		ok = true;
	}

	private void Reduce(string by, int n, int m, int direction)
	{
		if (map[n][m].Type != -1) return;
		List<int> correct = new List<int>();
		int start = direction;

		bool ok;
		foreach (var t in map[n][m].Possibilities)
		{
			Console.WriteLine( TilesTypes[t][start] + "rex");
			Console.WriteLine(by);
			if (TilesTypes[t][start].Equals(by))
			{
				correct.Add(t);
			}

		}
		Console.WriteLine("porpawne "+ correct.Count);
		map[n][m].Possibilities = correct;
		q.Enqueue([n,m],correct.Count);
	}
	
	private void Evaluate(int n, int m )
	{
		if (map[n][m].Type != -1) return;
		if (map[n][m].Possibilities.Count() == 0) return;
		Random rnd = new Random();
		int tile = rnd.Next(map[n][m].Possibilities.Count() );
		
		Console.WriteLine(tile);
		Console.WriteLine("opce "+ map[n][m].Possibilities.Count());
		tile = map[n][m].Possibilities[tile];
		map[n][m].Type = tile;
		if (n > 0)
		{
			Reduce( TilesTypes[tile][1],n-1,m,3);
		}
		if (m > 0)
		{
			Reduce( TilesTypes[tile][2],n,m-1,0);
		}
		if (n < nMax -1)
		{
			Reduce( TilesTypes[tile][3],n+1,m,1);
		}
		if (m < mMax-1)
		{
			Reduce( TilesTypes[tile][0],n,m+1,2);
		}
	}

	private async Task SendImage()
	{
		string url = TilesUrls[0];

		var ass = await MapS.SendImageToServer(url);
		Console.WriteLine(Convert.ToBase64String(ass));
		Stream stream = new MemoryStream(ass);
		var dotnetImageStream = new DotNetStreamReference(stream);
		Console.WriteLine(url);
		url = await Js.InvokeAsync<string>("addImage", dotnetImageStream);
		Console.WriteLine(url);
		TilesUrls.Add(url);
	}

}